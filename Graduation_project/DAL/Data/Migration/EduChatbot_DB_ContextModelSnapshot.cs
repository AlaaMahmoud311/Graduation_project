// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Data.Migration
{
    [DbContext(typeof(EduChatbot_DB_Context))]
    partial class EduChatbot_DB_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoursesDashBoard", b =>
                {
                    b.Property<int>("Coursesid")
                        .HasColumnType("int");

                    b.Property<int>("DashBoardsid")
                        .HasColumnType("int");

                    b.HasKey("Coursesid", "DashBoardsid");

                    b.HasIndex("DashBoardsid");

                    b.ToTable("CoursesDashBoard");
                });

            modelBuilder.Entity("DAL.Entities.Choices", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.Property<int>("Questionid")
                        .HasColumnType("int");

                    b.Property<string>("choice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Questionid");

                    b.ToTable("Choices");
                });

            modelBuilder.Entity("DAL.Entities.Courses", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Course_level")
                        .HasColumnType("int");

                    b.Property<string>("Course_link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Course_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Track_id")
                        .HasColumnType("int");

                    b.Property<int>("Tracksid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Tracksid");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DAL.Entities.DashBoard", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("age")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("DashBoards");
                });

            modelBuilder.Entity("DAL.Entities.DashBoard_Course", b =>
                {
                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<int>("Dash_Id")
                        .HasColumnType("int");

                    b.Property<int>("Courseid")
                        .HasColumnType("int");

                    b.Property<int>("DashBoardid")
                        .HasColumnType("int");

                    b.HasKey("Course_Id", "Dash_Id");

                    b.HasIndex("Courseid");

                    b.HasIndex("DashBoardid");

                    b.ToTable("DashBoard_Course");
                });

            modelBuilder.Entity("DAL.Entities.DashBoard_Track", b =>
                {
                    b.Property<int>("Track_Id")
                        .HasColumnType("int");

                    b.Property<int>("Dash_Id")
                        .HasColumnType("int");

                    b.Property<int>("DashBoardid")
                        .HasColumnType("int");

                    b.Property<int>("Tracksid")
                        .HasColumnType("int");

                    b.HasKey("Track_Id", "Dash_Id");

                    b.HasIndex("DashBoardid");

                    b.HasIndex("Tracksid");

                    b.ToTable("DashBoard_Track");
                });

            modelBuilder.Entity("DAL.Entities.Question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Quizesid")
                        .HasColumnType("int");

                    b.Property<string>("Right_answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Track_id")
                        .HasColumnType("int");

                    b.Property<string>("question_Header")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("quize_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Quizesid");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DAL.Entities.Quizes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Track_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Track_id")
                        .IsUnique();

                    b.ToTable("Quizes");
                });

            modelBuilder.Entity("DAL.Entities.Tracks", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("track_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("DashBoardTracks", b =>
                {
                    b.Property<int>("dashboardsid")
                        .HasColumnType("int");

                    b.Property<int>("tracksid")
                        .HasColumnType("int");

                    b.HasKey("dashboardsid", "tracksid");

                    b.HasIndex("tracksid");

                    b.ToTable("DashBoardTracks");
                });

            modelBuilder.Entity("CoursesDashBoard", b =>
                {
                    b.HasOne("DAL.Entities.Courses", null)
                        .WithMany()
                        .HasForeignKey("Coursesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.DashBoard", null)
                        .WithMany()
                        .HasForeignKey("DashBoardsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Choices", b =>
                {
                    b.HasOne("DAL.Entities.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("Questionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DAL.Entities.Courses", b =>
                {
                    b.HasOne("DAL.Entities.Tracks", "Tracks")
                        .WithMany("Courses")
                        .HasForeignKey("Tracksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("DAL.Entities.DashBoard_Course", b =>
                {
                    b.HasOne("DAL.Entities.Courses", "Course")
                        .WithMany()
                        .HasForeignKey("Courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.DashBoard", "DashBoard")
                        .WithMany()
                        .HasForeignKey("DashBoardid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("DashBoard");
                });

            modelBuilder.Entity("DAL.Entities.DashBoard_Track", b =>
                {
                    b.HasOne("DAL.Entities.DashBoard", "DashBoard")
                        .WithMany()
                        .HasForeignKey("DashBoardid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Tracks", "Tracks")
                        .WithMany()
                        .HasForeignKey("Tracksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DashBoard");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("DAL.Entities.Question", b =>
                {
                    b.HasOne("DAL.Entities.Quizes", "Quizes")
                        .WithMany("Questions")
                        .HasForeignKey("Quizesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quizes");
                });

            modelBuilder.Entity("DAL.Entities.Quizes", b =>
                {
                    b.HasOne("DAL.Entities.Tracks", "Track")
                        .WithOne("quize")
                        .HasForeignKey("DAL.Entities.Quizes", "Track_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Track");
                });

            modelBuilder.Entity("DashBoardTracks", b =>
                {
                    b.HasOne("DAL.Entities.DashBoard", null)
                        .WithMany()
                        .HasForeignKey("dashboardsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Tracks", null)
                        .WithMany()
                        .HasForeignKey("tracksid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Question", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("DAL.Entities.Quizes", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DAL.Entities.Tracks", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("quize")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
